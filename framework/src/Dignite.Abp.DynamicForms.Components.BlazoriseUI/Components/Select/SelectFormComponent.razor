@using Dignite.Abp.DynamicForms.Select
@using System.Text.Json;
@inherits FormComponentBase<SelectFormProvider,SelectConfiguration>

<Validation Validator="@ValidateIsRequired">
    <Field Horizontal="@(!IsChild)">
        <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop" hidden="@IsChild">@Field.DisplayName</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10.OnDesktop">
            @if (FormConfiguration.Multiple)
            { 
            <Select TValue="string" SelectedValues="@Values" SelectedValuesChanged="@OnSelectedValuesChanged" Multiple="true">                
                @foreach(var option in FormConfiguration.Options)
                {
                    <SelectItem Value="@option.Value">@option.Text</SelectItem>
                }
            </Select>
            }
            else
            {
            <Select TValue="string" SelectedValue="@(Values.Any()?Values[0]:FormConfiguration.NullText)" SelectedValueChanged="@OnSelectedValueChanged">
                @if (!FormConfiguration.NullText.IsNullOrEmpty())
                {
                    <SelectItem Value="@FormConfiguration.NullText">@FormConfiguration.NullText</SelectItem>
                }
                @foreach(var option in FormConfiguration.Options)
                {
                    <SelectItem Value="@option.Value">@option.Text</SelectItem>
                }
            </Select>
            }
            <FieldHelp>@FormConfiguration.Description</FieldHelp>
        </FieldBody>
    </Field>
</Validation>


@code{

    private List<string> Values = new List<string>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //
        if (Values==null || !Values.Any())
        {
            if (FormConfiguration.Options.Any(o => o.Selected))
            {
                Values = FormConfiguration.Options.Where(o => o.Selected).Select(o => o.Value).ToList();
                CustomizableObject.SetField(Field.Name, Values);
            }
            else if (FormConfiguration.NullText.IsNullOrEmpty() && FormConfiguration.Options.Any())
            {
                Values = new List<string>();
                Values.Add(FormConfiguration.Options.First().Value);
                CustomizableObject.SetField(Field.Name, Values);
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var fieldValue = CustomizableObject.GetField(Field.Name);
        if (fieldValue != null)
        {
            try
            {
                Values = JsonSerializer.Deserialize<List<string>>(fieldValue.ToString());
            }
            catch
            { }
        }
    }

    void ValidateIsRequired( ValidatorEventArgs e )
    {
        if(FormConfiguration.Required)
        {
            e.Status = (e.Value == null || e.Value.ToString()==FormConfiguration.NullText) ? ValidationStatus.Error : ValidationStatus.Success;
        }
    }

    Task OnSelectedValueChanged(string value )
    {
        Values.Clear();
        Values.Add(value);
        CustomizableObject.SetField(Field.Name, Values);

        return Task.CompletedTask;
    }

    //
    Task OnSelectedValuesChanged(IReadOnlyList<string> values )
    {
        Values = values.ToList();
        CustomizableObject.SetField(Field.Name, Values);

        return Task.CompletedTask;
    }
}