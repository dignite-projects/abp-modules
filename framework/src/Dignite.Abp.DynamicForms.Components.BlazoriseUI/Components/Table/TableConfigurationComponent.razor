@using Dignite.Abp.DynamicForms
@using Dignite.Abp.DynamicForms.Table
@using Dignite.Abp.DynamicForms.Textbox
@using System.Collections.Immutable
@using Dignite.Abp.DynamicForms.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inject IEnumerable<IForm> AllForms
@inject AbpBlazorMessageLocalizerHelper<AbpDynamicFormsResource> LH
@inject IConfigurationComponentSelector configurationComponentSelector
@inherits ConfigurationComponentBase<TableForm,TableConfiguration>

<Validation>
    <Field>
        <FieldLabel>@L["FieldDisplayName"]</FieldLabel>
        <TextEdit MaxLength="CustomizeFieldInfoConsts.MaxDisplayNameLength" @bind-Text="@Field.DisplayName" />
    </Field>
</Validation>
<Validation>
    <Field>
        <FieldLabel>@L["FieldName"]</FieldLabel>
        <TextEdit Pattern="@CustomizeFieldInfoConsts.NameRegularExpression" MaxLength="CustomizeFieldInfoConsts.MaxNameLength" @bind-Text="@Field.Name">
            <FieldHelp>@L["FieldNameHelpText"]</FieldHelp>
        </TextEdit>
    </Field>
</Validation>

<Validation>
    <Field>
        <FieldLabel>@L["Description"]</FieldLabel>
        <TextEdit @bind-Text="@FormConfiguration.Description" />
    </Field>
</Validation>

<Field>
    <FieldLabel>@L["TableColumns"]</FieldLabel>
    <Table>
        <TableHeader>
            <Blazorise.TableRow>
                <TableHeaderCell>@L["TableColumnName"]</TableHeaderCell>
                <TableHeaderCell>@L["TableColumnForm"]</TableHeaderCell>
                <TableHeaderCell>
                    <Button @onclick="@AddTableColumn"><Icon Name="IconName.PlusCircle" /></Button>
                </TableHeaderCell>
            </Blazorise.TableRow>
        </TableHeader>
        <TableBody>
            @foreach(var column in TableColumns)
            {
                var index = TableColumns.IndexOf(column);
                <Blazorise.TableRow>
                    <TableRowCell>
                        <Validation Validator="((e)=>ValidateColumnDisplayName(e))">
                        <TextEdit @bind-Text="@column.CustomField.DisplayName" />
                        </Validation>
                    </TableRowCell>
                    <TableRowCell>
                        <Validation Validator="((e)=>ValidateColumnFieldControl(e))">
                        <Select TValue="string" SelectedValue="@column.CustomField.FormName" SelectedValueChanged="(val => OnSelectedValueChanged((string)val, column))">
                            <SelectItem TValue="string" Value="null">@L["SelectForm"]</SelectItem>
                            @if (AvailableForms != null)
                            {
                                    foreach (var p in AvailableForms)
                                {
                                    <SelectItem TValue="string" Value="@p.Name">@p.DisplayName</SelectItem>
                                }
                            }                            
                        </Select>
                        </Validation>
                    </TableRowCell>
                    <TableRowCell>
                        <Button @onclick="@(val => OnSelectedValueChanged(column.CustomField.FormName, column))"><Icon Name="IconName.Edit" /></Button>
                        <Button @onclick="@(val => RemoveTableColumn(val, column))"><Icon Name="IconName.Remove" /></Button>
                        @if (index > 0)
                        {
                            <Button @onclick="@(val => MoveTableColumn(val, column,index-1))"><Icon Name="IconName.ArrowUp" /></Button>
                        }
                        @if (index < TableColumns.Count-1)
                        {
                            <Button @onclick="@(val => MoveTableColumn(val, column,index+1))"><Icon Name="IconName.ArrowDown" /></Button>
                        }
                    </TableRowCell>
                </Blazorise.TableRow>
            }
        </TableBody>
    </Table>
</Field>


<Blazorise.Modal @ref="FormConfigModal" Closing="@ClosingEditModal">
    <Blazorise.ModalContent Centered="true">
        <Blazorise.Form>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>@L["Configuration"]</Blazorise.ModalTitle>
                <Blazorise.CloseButton Clicked="CloseAuditModalAsync" />
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                <Blazorise.Validations @ref="@ValidationsRef" Model="@SelectedConfigurationParameters" ValidateOnLoad="false">
                    <!------------- selected form configuration component ------------------------------------->
                    @if (SelectedConfigurationType is not null)
                    {
                        <DynamicComponent Type="@SelectedConfigurationType" Parameters='@SelectedConfigurationParameters' />
                    }
                </Blazorise.Validations>
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="Blazorise.Color.Secondary" Clicked="CloseAuditModalAsync">@L["Cancel"]</Blazorise.Button>                                
                <SubmitButton Clicked="@SaveConfigAsync" />
            </Blazorise.ModalFooter>
        </Blazorise.Form>
    </Blazorise.ModalContent>
</Blazorise.Modal>
@code{

    protected ImmutableList<IForm> AvailableForms;
    protected List<TableColumn> TableColumns;

    protected Type SelectedConfigurationType;
    protected Dictionary<string, object> SelectedConfigurationParameters = new();
    protected Modal FormConfigModal;
    protected Validations ValidationsRef;

    protected override Task OnInitializedAsync()
    {
        AvailableForms = AllForms.Where(p => p.FormType == Dignite.Abp.DynamicForms.FormType.Simple).ToImmutableList();
        return base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        TableColumns = FormConfiguration.TableColumns;
        if (!TableColumns.Any())
        {
            AddTableColumn();
        }
    }
    private void AddTableColumn()
    {
        var column = new TableColumn(
                new TableColumnCustomField(
                    Nanoid.Nanoid.Generate("abcdefghijklmnopqrstuvwxyz", 10),
                    "",
                    null,
                    "",
                    new FormConfigurationDictionary()
                )
            );
        TableColumns.Add(column);            
        FormConfiguration.TableColumns=TableColumns;
    }

    private void RemoveTableColumn(MouseEventArgs e,TableColumn item)
    {
        TableColumns.Remove(item);
        FormConfiguration.TableColumns=TableColumns;
    }
    private void MoveTableColumn(MouseEventArgs e,TableColumn item,int targetIndex)
    {
        TableColumns.MoveItem(tc=>tc==item, targetIndex);
        FormConfiguration.TableColumns=TableColumns;
    }

    private async Task OnSelectedValueChanged(string formName,TableColumn column)
    {
        if (!formName.IsNullOrEmpty())
        {
            column.CustomField.FormName = formName;
            if (formName != L["SelectForm"].Value)
            {
                var component = configurationComponentSelector.Get(formName);

                SelectedConfigurationParameters = new Dictionary<string, object>();
                SelectedConfigurationParameters.Add("Field", column.CustomField);
                SelectedConfigurationType = component.GetType();

                await OpenConfigModalAsync();
            }
        }
    }

    private async Task OpenConfigModalAsync()
    { 
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await FormConfigModal.Show();
        });
    }

    private async Task SaveConfigAsync()
    {
        try
        {
            var validate = true;
            if (ValidationsRef != null)
            {
                validate = await ValidationsRef.ValidateAll();

                if (TableColumns.Select(tc => tc.Name).Distinct().Count() != TableColumns.Count)
                {
                    validate = false;
                    await Notify.Error(L["ColumnNameAlreadyExist"]);
                }
            }
            if (validate)
            {
                FormConfiguration.TableColumns = TableColumns;
                await InvokeAsync(FormConfigModal.Hide);
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }        
    }

    protected virtual Task ClosingEditModal(ModalClosingEventArgs eventArgs)
    {
        // cancel close if clicked outside of modal area
        eventArgs.Cancel = eventArgs.CloseReason == CloseReason.FocusLostClosing;

        return Task.CompletedTask;
    }

    protected virtual Task CloseAuditModalAsync()
    {
        InvokeAsync(FormConfigModal.Hide);
        return Task.CompletedTask;
    }

    void ValidateColumnFieldControl(ValidatorEventArgs e)
    {
        e.Status = e.Value == null || Convert.ToString(e.Value).IsNullOrWhiteSpace() || Convert.ToString(e.Value) == L["SelectForm"].Value
            ? ValidationStatus.Error
            : ValidationStatus.Success;
    }

    void ValidateColumnDisplayName(ValidatorEventArgs e)
    {
        e.Status = Convert.ToString(e.Value).IsNullOrWhiteSpace()
            ? ValidationStatus.Error
            : ValidationStatus.Success;
    }
}