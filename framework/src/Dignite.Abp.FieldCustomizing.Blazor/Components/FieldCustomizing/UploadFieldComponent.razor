@using Dignite.Abp.FieldCustomizing.Blazor
@using Dignite.Abp.FieldCustomizing.Fields
@using Dignite.Abp.FieldCustomizing.Fields.Upload
@using Dignite.Abp.FieldCustomizing
@using Microsoft.AspNetCore.Components.Forms
@inherits FieldComponentBase<UploadFieldProvider,UploadConfiguration>

    <Field Horizontal="@(!HideFieldLable)">
        <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop" hidden="@HideFieldLable">@CustomizeField.Definition.DisplayName</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10.OnDesktop">
            @if (Files!=null && Files.Any())
            {            
                <Table>
                    <TableHeader>
                        <Blazorise.TableRow>
                            <TableHeaderCell>文件名</TableHeaderCell>
                            <TableHeaderCell>文件大小</TableHeaderCell>
                            <TableHeaderCell>下载</TableHeaderCell>
                        @if (EnableDelete)
                        {                            
                            <TableHeaderCell>删除</TableHeaderCell>
                        }
                    </Blazorise.TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach(var file in Files)
                        {
                            <Blazorise.TableRow>
                                <TableRowCell>@file.FileName</TableRowCell>
                                <TableRowCell>@file.BinarySize</TableRowCell>
                                <TableRowCell><a href="@($"/api/file-management/files/{file.ContainerName}/{file.BlobName}?fileName={file.FileName}")" target="_blank">下载</a></TableRowCell>
                                @if (EnableDelete)
                                {                            
                                    <TableRowCell>
                                <Button @onclick="@(val => Delete(file))"><Icon Name="IconName.Delete" /></Button>
                                </TableRowCell>
                                }
                            </Blazorise.TableRow>
                        }
                    </TableBody>
                </Table>
            }
    </FieldBody>
    </Field>


@code{

    /// <summary>
    /// 启用删除的功能
    /// </summary>
    [Parameter]
    public bool EnableDelete { get; set; } = false;

    [Parameter]
    public EventCallback<File> OnDeleteCallback { get; set; }

    public List<File> Files = new List<File>();

    protected override void OnInitialized()
    {
        var value = CustomizeField.Entity.GetField(CustomizeField.Definition.Name, null);
        if (value != null)
        {
            Files = Newtonsoft.Json.JsonConvert.DeserializeObject<List<File>>(value.ToString());
        }

        base.OnInitialized();
    }


    private async Task Delete(File file)
    {
        var confirmed = await Message.Confirm(L["DeletionConfirmationMessage"]);
        if(confirmed)
        {
            Files.RemoveAll(f => f.BlobName == file.BlobName);
            await OnDeleteCallback.InvokeAsync(file);
        }
    }
}