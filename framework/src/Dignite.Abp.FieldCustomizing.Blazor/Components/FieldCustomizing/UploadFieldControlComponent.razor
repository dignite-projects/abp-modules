@using Dignite.Abp.FieldCustomizing.Blazor
@using Dignite.Abp.FieldCustomizing.Fields
@using Dignite.Abp.FieldCustomizing.Fields.Upload
@using Dignite.Abp.FieldCustomizing
@using Microsoft.AspNetCore.Components.Forms
@inherits FieldControlComponentBase<UploadFieldProvider,UploadConfiguration>

    <Field Horizontal="@(!HideFieldLable)">
        <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop" hidden="@HideFieldLable">@CustomizeField.Definition.DisplayName</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10.OnDesktop">      
            <FileEdit Changed="@OnFileChanged" Multiple="@Configuration.Multiple" Filter="@Configuration.Filter" Placeholder="@Configuration.Placeholder" />
            <UploadFieldComponent CustomizeField="@CustomizeField" HideFieldLable="true" EnableDelete="true" OnDeleteCallback="Delete"></UploadFieldComponent>
            <FieldHelp>@Configuration.Description</FieldHelp>
        </FieldBody>
    </Field>


@code{
    private List<File> existingFiles = new List<File>();
    private List<IFileEntry> newFiles = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var value = CustomizeField.Entity.GetField(CustomizeField.Definition.Name, null);
        if (value != null)
        {
            existingFiles = Newtonsoft.Json.JsonConvert.DeserializeObject<List<File>>(value.ToString());
        }
    }


    private Task OnFileChanged( FileChangedEventArgs e )
    {
        if (e.Files.Any())
        {
            newFiles = new List<IFileEntry>();
            foreach (var file in e.Files)
            {
                newFiles.Add(file);
            }
            CustomizeField.Entity.SetField(
                CustomizeField.Definition.Name,
                new UploadFieldValue(newFiles, existingFiles)
            );
        }
        else
        {
            newFiles = null;
            CustomizeField.Entity.SetField(
                CustomizeField.Definition.Name,
                new UploadFieldValue(newFiles, existingFiles)
            );
        }
        return Task.CompletedTask;
    }


    private Task Delete(File file)
    {
        existingFiles.RemoveAll(f => f.BlobName == file.BlobName);
        CustomizeField.Entity.SetField(
            CustomizeField.Definition.Name,
            new UploadFieldValue(newFiles, existingFiles)
        );
        return Task.CompletedTask;
    }
}