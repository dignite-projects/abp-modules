@page "/notification-center"
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@inject INotificationAppService NotificationAppService
@inject INotificationDataComponentSelector NotificationDataComponentSelector
@inherits AbpComponentBase

<PageTitle>@L["NotificationCenter"]</PageTitle>

<Container Breakpoint="Breakpoint.Mobile">
    @* ************************* PAGE HEADER ************************* *@
    <PageHeader Title="@L["NotificationCenter"]"
                Toolbar="@Toolbar">
    </PageHeader>
    @if (userNotifications != null && userNotifications.Any())
    {    
        <ListGroup Margin="Margin.Is3.FromBottom">
            @foreach (var item in userNotifications)
                {
                    var component = NotificationDataComponentSelector.Get(item.Data.Type);
                    var parameters = new Dictionary<string, object>() {
                        { "NotificationData",item.Data}
                    };
                <ListGroupItem>
                    <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100" TextColor="TextColor.Secondary">
                        <Small>
                            @if (item.State == Notifications.UserNotificationState.Unread)
                            {
                                <Span Background="Background.Primary" Class="unread-badge"></Span>
                            }
                            @(item.NotificationDisplayName.IsNullOrEmpty()?item.NotificationName:item.NotificationDisplayName)</Small>
                        <Small>@item.CreationTime</Small>
                    </Div>
                    <DynamicComponent Type="@component.GetType()" Parameters="@parameters"></DynamicComponent>
                </ListGroupItem>
            }
        </ListGroup>

        @if (skipCount < totalCount)
        {
            <SubmitButton Clicked="@LoadMoreAsync" Block Color="Color.Secondary">
                @L["ButtonLoadMoreText"]
            </SubmitButton>
        }
    }
</Container>


@* ************************* Subscribe Modal ************************* *@
<Modal @ref="CreateModal" Closing="@ClosingCreateModal">
    <ModalContent Centered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["Subscribe"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <ListGroup Flush>
                    @foreach (var item in availableSubscriptions)
                    {
                    <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Start" Padding="Padding.Is0.FromStart.Is0.FromEnd">
                        <Paragraph>
                            @item.DisplayName
                            <Small Display="Display.Block" TextColor="TextColor.Secondary">
                                @item.Description
                            </Small>
                        </Paragraph>
                        <Switch TValue="bool" Checked="@item.IsSubscribed" CheckedChanged="@(e => OnSubscribeChanged(e, item.NotificationName))"></Switch>
                    </ListGroupItem>
                    }
                </ListGroup>
            </ModalBody>
        </Form>
    </ModalContent>
</Modal>