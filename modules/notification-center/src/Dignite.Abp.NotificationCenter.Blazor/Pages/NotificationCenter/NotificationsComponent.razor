@using Volo.Abp.AspNetCore.Components
@inject INotificationAppService NotificationAppService
@inject INotificationDataComponentSelector NotificationDataComponentSelector
@inject INotificationComponentProviderSelector NotificationComponentProviderSelector
@inherits AbpComponentBase


@if (userNotifications != null && userNotifications.Any())
{    
    @foreach (var item in userNotifications)
    {
        var componentProvider = NotificationComponentProviderSelector.Get(item.NotificationName);
        var component = NotificationDataComponentSelector.Get(item.Data.Type);
        var parameters = new Dictionary<string, object>() {
            { "NotificationData",item.Data}
        };
        <Div Padding="Padding.Is3.OnX.Is2.FromTop" Flex="Flex.JustifyContent.Start">
            <Div Class="notification-icon" Border="Border.Rounded" Position="Position.Relative" Margin="Margin.Is2.FromEnd">
                <Icon Name="componentProvider.GetIcon(string.Empty)" IconSize="IconSize.Large"></Icon>
                @if (item.State == Notifications.UserNotificationState.Unread)
                {
                    <Badge Color="Color.Primary" Pill Position="Position.Absolute.Top.Is0.Start.Is100.Translate.Middle" Border="Border.Light.OnAll.RoundedCircle" Padding="Padding.Is1">
                        <Span Visibility="Visibility.Invisible" Position="Position.Absolute">unread messages</Span>
                    </Badge>
                }
            </Div>
            <Div>
                <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100" TextColor="TextColor.Secondary">
                    <Small>
                        @(item.NotificationDisplayName.IsNullOrEmpty() ? item.NotificationName : item.NotificationDisplayName)
                    </Small>
                    <Small>@item.CreationTime</Small>
                </Div>
                <DynamicComponent Type="@component.GetType()" Parameters="@parameters"></DynamicComponent>
            </Div>
        </Div>
    }

    @if (skipCount < totalCount)
    {
        <SubmitButton Clicked="@LoadMoreAsync" Block Color="Color.Secondary">
            @L["ButtonLoadMoreText"]
        </SubmitButton>
    }
}
else
{
    <Div Padding="Padding.Is3.OnX.Is2.FromTop" TextColor="TextColor.Black50">
        @L["NoNotifications"]
    </Div>    
}
