@page "/setting-management/global-settings"
@using Dignite.Abp.FieldCustomizing
@using Dignite.Abp.FieldCustomizing.Components
@using Dignite.Abp.SettingManagement.Localization
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@inject IGlobalSettingsAppService settingsAppService
@inject IFieldControlComponentSelector fieldControlComponentSelector
@inherits AbpComponentBase
@code
{
    private IReadOnlyList<SettingGroupDto> SettingGroup;
    protected Validations ValidationsRef;
    string selectedTab;
    private SettingObject settingObject= new SettingObject();

    public GlobalSettings()
    {
        LocalizationResource = typeof(AbpSettingManagementResource);
    }

    protected override async Task OnInitializedAsync()
    {
        SettingGroup = (await settingsAppService.GetAllAsync()).Items;
        foreach (var settingNav in SettingGroup)
        {
            foreach (var setting in settingNav.Settings)
            {
                settingObject.CustomizedFields.Add(setting.Name,setting.Value);
            }
        }
        if (SettingGroup.Any())
        {
            selectedTab = SettingGroup[0].Name;
        }
        await base.OnInitializedAsync();
    }

    private Task OnSelectedTabChanged( string name )
    {
        selectedTab = name;

        return Task.CompletedTask;
    }

    private async Task SaveAsync()
    {        
        try
        {
            var validate = true;
            if (ValidationsRef != null)
            {
                validate = await ValidationsRef.ValidateAll();
            }
            if (validate)
            {
                var settingNav = SettingGroup.Single(m => m.Name == selectedTab);
                var input = new UpdateGlobalSettingsInputForClientProxy(settingNav.Settings);
                input.GroupName = settingNav.Name;
                input.CustomizedFields = settingObject.CustomizedFields;

                await settingsAppService.UpdateAsync(input);
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    Dictionary<string, object> GetSettingFormControlComponentParameters(SettingDto setting)
    { 
        var parameters = new Dictionary<string, object>();
        parameters.Add("CustomizeField", 
            new Abp.FieldCustomizing.CustomizeField(
                settingObject, 
                setting
            ));

        return parameters;
    }
}

<PageHeader Title="@L["Settings"]"></PageHeader>
<Blazorise.Form>
    <Blazorise.Validations @ref="@ValidationsRef" Model="@settingObject" ValidateOnLoad="false">
        @if (SettingGroup != null)
{
<Tabs TabPosition="TabPosition.Start" Pills="true" SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        @foreach (var settingNav in SettingGroup)
        {
            <Tab Name="@settingNav.Name">@settingNav.DisplayName</Tab>
        }
    </Items>
    <Content>
            @foreach (var settingNav in SettingGroup)
            {
                var groups = settingNav.Settings.Where(s => s.Section != null).Select(s=>s.Section).Distinct().ToList();
                var ungroupedSettings = settingNav.Settings.Where(s => s.Section == null);
                <TabPanel Name="@settingNav.Name">   
                    @if (groups.Any())
                    {
                        foreach (var group in groups)
                        {
                            <h5>
                                @group
                            </h5>                 
                            <Card Class="mb-3">
                                <CardBody>
                                @foreach(var setting in settingNav.Settings.Where(s=>s.Section==group).ToList())
                                {
                                    var component = fieldControlComponentSelector.Get(setting.FieldProviderName);
                                    var parameters = GetSettingFormControlComponentParameters(setting);
                                    <DynamicComponent Type="@component.GetType()" Parameters="@parameters"></DynamicComponent>
                                }
                                </CardBody>
                            </Card>
                        }
                    }
                    @if (ungroupedSettings.Any())
                    {
                    <Card Class="mb-3">
                        <CardBody>
                        @foreach (var setting in ungroupedSettings)
                        {
                            var component = fieldControlComponentSelector.Get(setting.FieldProviderName);
                            var parameters = GetSettingFormControlComponentParameters(setting);
                            <DynamicComponent Type="@component.GetType()" Parameters="@parameters"></DynamicComponent>
                        }     
                        </CardBody>
                    </Card>  
                    }
                                            
                </TabPanel>
            }
        <Button Color="Color.Primary" Clicked="@SaveAsync">@L["Save"]</Button>
    </Content>
</Tabs>
}
    </Blazorise.Validations>
</Blazorise.Form>