@page "/setting-management/global-settings"
@using Dignite.Abp.DynamicForms
@using Dignite.Abp.DynamicForms.Components
@using Dignite.Abp.SettingManagement.Localization
@using Microsoft.AspNetCore.Authorization;
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@attribute [Authorize(SettingManagementPermissions.Global)]
@inject IGlobalSettingsAppService settingsAppService
@inject IFormComponentSelector fieldFormComponentSelector
@inherits AbpComponentBase
@code
{
    private IReadOnlyList<SettingGroupDto> AllSettingGroups;
    private IList<SettingGroupDto> SubGroups;
    private string GroupName;
    private string SubGroupName;
    private SettingsCustomizableObject SettingsCustomizableObject;
    private IReadOnlyList<SettingDto> Settings;

    public GlobalSettings()
    {
        LocalizationResource = typeof(AbpSettingManagementResource);
    }

    protected override async Task OnInitializedAsync()
    {
        AllSettingGroups = (await settingsAppService.GetAllGroupsAsync()).Items;
        if (AllSettingGroups.Any())
        {
            GroupName = AllSettingGroups[0].Name;
            SubGroups = AllSettingGroups[0].SubGroups;

            await OnGroupChanged(GroupName);
        }
        await base.OnInitializedAsync();
    }

    private async Task OnGroupChanged(string name)
    {
        GroupName = name;
        SubGroupName = null;
        SubGroups = AllSettingGroups.First(g=>g.Name==name).SubGroups;

        if (AllSettingGroups.First(g => g.Name == GroupName).Settings.Any())
        {
            await BuildSettingsCustomizableObject();
        }
        else
        {
            Settings = null;
            SettingsCustomizableObject = null;
        }
    }

    private async Task OnSubGroupChanged(string subGroupName)
    {
        SubGroupName = subGroupName;
        await BuildSettingsCustomizableObject();
    }

    private async Task BuildSettingsCustomizableObject()
    {
        Settings = (await settingsAppService.GetListAsync(new GetSettingsInput
            {
                GroupName = GroupName,
                SubGroupName = SubGroupName
            })).Items;
        SettingsCustomizableObject = new SettingsCustomizableObject();
        foreach (var setting in Settings)
        {
            SettingsCustomizableObject.CustomFields.Add(setting.Name, setting.Value);
        }
    }


    private async Task SaveAsync()
    {
        var input = new UpdateGlobalSettingsInputForClientProxy(Settings);
        input.GroupName = GroupName;
        input.SubGroupName = SubGroupName;
        input.CustomFields = SettingsCustomizableObject.CustomFields;

        await settingsAppService.UpdateAsync(input);
    }
}

<Container Background="Background.White" Border="Border.Is1.Rounded" Padding="Padding.Is0">
    @if (AllSettingGroups != null)
    {
        <Row NoGutters>
            <Column ColumnSize="ColumnSize.Is4" Border="Border.Is1.OnEnd">
                <Heading Size="HeadingSize.Is4" Padding="Padding.Is4.Is0.FromBottom">@L["Settings"]</Heading>
                <Divider></Divider>
                <ListGroup Flush Mode="ListGroupMode.Selectable" SelectedItem="@GroupName" SelectedItemChanged="OnGroupChanged">
                    @foreach (var group in AllSettingGroups)
                    {
                        <ListGroupItem Name="@group.Name">
                            <Div Flex="Flex.AlignItems.Center" Width="Width.Is100">
                                <Div Margin="Margin.Is3.FromEnd">
                                    <i class="@group.Icon"></i>
                                </Div>
                                <Div Flex="Flex.Column" Width="Width.Is100">
                                    @group.DisplayName
                                    <Small>@group.Description</Small>
                                </Div>
                                <Icon Name="IconName.AngleRight"></Icon>
                            </Div>
                        </ListGroupItem>                    
                    }
                </ListGroup>  
            </Column>
            <Column ColumnSize="ColumnSize.Is8" Padding="Padding.Is4.Is5.FromBottom">
                <Heading Size="HeadingSize.Is4">
                    @if (SubGroupName.IsNullOrEmpty())
                    {
                        var group = AllSettingGroups.First(g => g.Name == GroupName);
                        @group.DisplayName
                    }
                    else
                    {
                        var subGroup = AllSettingGroups.First(g => g.Name == GroupName).SubGroups.First(sg=>sg.Name==SubGroupName);
                        <Button Color="Color.Light" Clicked="@(()=> OnGroupChanged(GroupName))" Size="Size.Small" Margin="Margin.Is2.FromEnd" Padding="Padding.Is2.FromStart.Is2.FromEnd.Is1.FromTop.Is1.FromBottom" Border="Border.Is0.RoundedCircle">
                            <Icon Name="IconName.ArrowLeft"></Icon>
                        </Button>
                        @subGroup.DisplayName                   
                    }
                </Heading>
                <Divider></Divider>
                @if (GroupName != null && SubGroupName == null && SubGroups != null && SubGroups.Any())
                {
                    <ListGroup Flush Mode="ListGroupMode.Selectable" SelectedItem="@SubGroupName" SelectedItemChanged="OnSubGroupChanged">
                        @foreach (var subGroup in SubGroups)
                        {
                            <ListGroupItem Name="@subGroup.Name">
                                <Div Flex="Flex.AlignItems.Center" Width="Width.Is100">
                                    <Div Margin="Margin.Is3.FromEnd">
                                        <i class="@subGroup.Icon"></i>
                                    </Div>
                                    <Div Flex="Flex.Column" Width="Width.Is100">
                                        @subGroup.DisplayName
                                        <Small TextColor="TextColor.Secondary">@subGroup.Description</Small>
                                    </Div>
                                    <Icon Name="IconName.AngleRight"></Icon>
                                </Div>
                            </ListGroupItem>
                        }
                    </ListGroup>
                }
                @if (Settings != null)
                {
                    if (SubGroupName == null)
                    {
                        <Divider></Divider>
                    }
                    <SettingsFormComponent Settings="@Settings" SettingsCustomizableObject="SettingsCustomizableObject" OnSaveCallback="SaveAsync"></SettingsFormComponent>
                }
            </Column>
        </Row>
    }
</Container>
