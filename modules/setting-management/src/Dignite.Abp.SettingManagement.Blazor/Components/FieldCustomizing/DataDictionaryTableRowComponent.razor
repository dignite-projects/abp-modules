@using Dignite.Abp.FieldCustomizing.Blazor
@using Dignite.Abp.FieldCustomizing.Fields
@using Dignite.Abp.FieldCustomizing.Fields.DataDictionary
@using Dignite.Abp.FieldCustomizing
@using Volo.Abp.AspNetCore.Components
@inherits AbpComponentBase


<TableRow>
    <TableRowCell>
        
    
        <Addons>
            @if (Level - 1 > 0)
            {
                
                <Addon AddonType="AddonType.Start">
                    <AddonLabel>
                @for (int i = 0; i < Level - 1; i++)
                        {
                            @("--")
                        }
                        @("|")</AddonLabel>
                    </Addon>
            }
            <Addon AddonType="AddonType.Body">
                <TextEdit Text="@Item.DisplayName" TextChanged="@OnItemDisplayNameChanged" />
            </Addon>
        </Addons>
    </TableRowCell>
    <TableRowCell><Check TValue="bool" Checked="@Item.IsActive" CheckedChanged="@OnItemIsActiveChanged" ></Check></TableRowCell>
    <TableRowCell>
        <Button @onclick="@RemoveAsync"><Icon Name="IconName.Remove" /></Button>
        <Button @onclick="@(e => AddDataDictionary())"><Icon Name="IconName.PlusCircle" /></Button>
    </TableRowCell>
</TableRow>
@if (Item.Children != null)
{
    @foreach (var item in Item.Children)
    {
        <DataDictionaryTableRowComponent DataDictionaries="@Item.Children" Item="@item" OnChanageCallback="DataDictionaryChanage" Level="@(Level+1)"></DataDictionaryTableRowComponent>
    }
}


@code{
    /// <summary>
    /// 数据字典行的层级
    /// </summary>
    [Parameter]
    public int Level { get; set; }

    [Parameter]
    public DataDictionary Item { get; set; }

    [Parameter]
    public List<DataDictionary> DataDictionaries { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnChanageCallback { get; set; }


    private async Task OnItemDisplayNameChanged( string value )
    {
        Item.DisplayName = value;        
        await OnChanageCallback.InvokeAsync();
    }
    
    private async Task OnItemIsActiveChanged( bool value )
    {
        Item.IsActive = value;        
        await OnChanageCallback.InvokeAsync();
    }

    private async Task RemoveAsync()
    {
        DataDictionaries.RemoveAll(dd => dd.Id == Item.Id);
        await OnChanageCallback.InvokeAsync();
    }
    

    private async Task AddDataDictionary()
    {
        if (Item.Children == null)
        {
            Item.Children = new List<DataDictionary>();
        }
        Item.Children.Add(new DataDictionary(Guid.NewGuid(), ""));
        await OnChanageCallback.InvokeAsync();
    }

    private async Task DataDictionaryChanage(MouseEventArgs e)
    {
        await OnChanageCallback.InvokeAsync();
    }
}